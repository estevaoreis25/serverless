"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.minimalScrapeSchema = exports.scrapeSchema = void 0;
const zod_1 = require("zod");
exports.scrapeSchema = zod_1.z.array(zod_1.z.object({
    url: zod_1.z.string(),
    searchString: zod_1.z.string(),
    isAdvertisement: zod_1.z.boolean(),
    title: zod_1.z.string(),
    categoryName: zod_1.z.string(),
    address: zod_1.z.string(),
    neighborhood: zod_1.z.string(),
    street: zod_1.z.string(),
    city: zod_1.z.string(),
    postalCode: zod_1.z.string(),
    state: zod_1.z.string(),
    countryCode: zod_1.z.string(),
    website: zod_1.z.string(),
    phone: zod_1.z.string(),
    phoneUnformatted: zod_1.z.string(),
    claimThisBusiness: zod_1.z.boolean(),
    location: zod_1.z.object({ lat: zod_1.z.number(), lng: zod_1.z.number() }),
    plusCode: zod_1.z.string(),
    menu: zod_1.z.string(),
    totalScore: zod_1.z.number(),
    permanentlyClosed: zod_1.z.boolean(),
    temporarilyClosed: zod_1.z.boolean(),
    placeId: zod_1.z.string(),
    categories: zod_1.z.array(zod_1.z.string()),
    cid: zod_1.z.string(),
    reviewsCount: zod_1.z.number(),
    reviewsDistribution: zod_1.z.object({
        oneStar: zod_1.z.number(),
        twoStar: zod_1.z.number(),
        threeStar: zod_1.z.number(),
        fourStar: zod_1.z.number(),
        fiveStar: zod_1.z.number(),
    }),
    imagesCount: zod_1.z.number(),
    imageCategories: zod_1.z.array(zod_1.z.string()),
    scrapedAt: zod_1.z.string(),
    reserveTableUrl: zod_1.z.null(),
    googleFoodUrl: zod_1.z.string(),
    reviews: zod_1.z.array(zod_1.z.object({
        name: zod_1.z.string(),
        text: zod_1.z.string().nullish(),
        publishAt: zod_1.z.string(),
        publishedAtDate: zod_1.z.string(),
        likesCount: zod_1.z.number(),
        reviewId: zod_1.z.string().nullish(),
        reviewUrl: zod_1.z.string().nullish(),
        reviewerId: zod_1.z.string().nullish(),
        reviewerUrl: zod_1.z.string().nullish(),
        reviewerPhotoUrl: zod_1.z.string().nullish(),
        reviewerNumberOfReviews: zod_1.z.number().nullish(),
        isLocalGuide: zod_1.z.boolean(),
        stars: zod_1.z.number(),
        rating: zod_1.z.null(),
        responseFromOwnerDate: zod_1.z.string().nullish(),
        responseFromOwnerText: zod_1.z.string().nullish(),
        reviewImageUrls: zod_1.z.array(zod_1.z.unknown()),
        reviewContext: zod_1.z.object({}),
        reviewDetailedRating: zod_1.z.object({}),
    })),
}));
exports.minimalScrapeSchema = zod_1.z.array(zod_1.z.object({
    url: zod_1.z.string(),
    searchString: zod_1.z.string(),
    searchPageUrl: zod_1.z.string().nullish(),
    searchPageLoadedUrl: zod_1.z.string().nullish(),
    isAdvertisement: zod_1.z.boolean().nullish(),
    title: zod_1.z.string(),
    description: zod_1.z.null(),
    price: zod_1.z.null(),
    categoryName: zod_1.z.string(),
    address: zod_1.z.string(),
    neighborhood: zod_1.z.string(),
    street: zod_1.z.string(),
    city: zod_1.z.string(),
    postalCode: zod_1.z.string(),
    state: zod_1.z.string(),
    countryCode: zod_1.z.string(),
    website: zod_1.z.string(),
    phone: zod_1.z.string(),
    phoneUnformatted: zod_1.z.string(),
    location: zod_1.z.object({ lat: zod_1.z.number(), lng: zod_1.z.number() }),
    plusCode: zod_1.z.string(),
    menu: zod_1.z.string(),
    totalScore: zod_1.z.number(),
    placeId: zod_1.z.string(),
    categories: zod_1.z.array(zod_1.z.string()),
    cid: zod_1.z.string(),
    reviewsCount: zod_1.z.number(),
    reviewsDistribution: zod_1.z.object({
        oneStar: zod_1.z.number(),
        twoStar: zod_1.z.number(),
        threeStar: zod_1.z.number(),
        fourStar: zod_1.z.number(),
        fiveStar: zod_1.z.number(),
    }),
    imagesCount: zod_1.z.number(),
    imageCategories: zod_1.z.array(zod_1.z.string()),
    scrapedAt: zod_1.z.string(),
    googleFoodUrl: zod_1.z.string().nullish(),
}));
//# sourceMappingURL=schemas.js.map